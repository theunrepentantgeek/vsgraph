using System;
using System.Drawing;

using Niche.Shared;

namespace Niche.Graphs
{
    /// <summary>
    /// A graph edge, linking two nodes
    /// </summary>
    public class Edge
    {
        /// <summary>
        /// Gets the node from which this edge starts
        /// </summary>
        public Node Start
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the node to which edge finishes
        /// </summary>
        public Node Finish
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the arrowhead to display at the finish of this edge
        /// </summary>
        public ArrowShape ArrowHead
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the arrowhead to display at the finish of this edge
        /// </summary>
        public ArrowShape ArrowTail
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the color to use for this edge
        /// </summary>
        public Color Color
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a value indicating whether this edge should be used for ranking
        /// </summary>
        public bool Constraining
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a value indicating the pen width to use for lines
        /// </summary>
        public double PenWidth
        {
            get;
            private set;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Edge"/> class.
        /// </summary>
        /// <param name="start">Start node from which this edge begins</param>
        /// <param name="finish">Finish node to which this edge runs</param>
        public Edge(Node start, Node finish)
        {
            if (start == null)
            {
                throw new ArgumentNullException("start", "Start node is mandatory");
            }

            if (finish == null)
            {
                throw new ArgumentNullException("finish", "Finish node is mandatory");
            }

            Start = start;
            Finish = finish;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Edge"/> class.
        /// </summary>
        /// <param name="start">Start node from which this edge begins</param>
        /// <param name="finish">Finish node to which this edge runs</param>
        /// <param name="style">Style to apply to the edge</param>
        public Edge(Node start, Node finish, EdgeStyle style)
            : this(start, finish)
        {
            if (style == null)
            {
                throw new ArgumentNullException("style", "Style is a mandatory parameter");
            }

            ArrowHead = style.ArrowHead;
            ArrowTail = style.ArrowTail;
            Color = style.Color;
            Constraining = style.Constraining;
            PenWidth = style.PenWidth;
        }

        /// <summary>
        /// Visit the passed visitor and return the result generated
        /// </summary>
        /// <param name="visitor">The visitor itself.</param>
        /// <typeparam name="TReturn">Type of return value.</typeparam>
        /// <returns>Result generated by the Visitor.</returns>
        public TReturn Visit<TReturn>(IGraphVisitor<TReturn> visitor)
            where TReturn : class
        {
            Require.NotNull("visitor", visitor);
            return visitor.VisitEdge(this);
        }
    }
}
